import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = """drop table IF EXISTS staging_events"""
staging_songs_table_drop = """drop table IF EXISTS staging_songs"""
songplay_table_drop = """drop table IF EXISTS songplay"""
user_table_drop = """drop table IF EXISTS users"""
song_table_drop = """drop table IF EXISTS songs"""
artist_table_drop = """drop table IF EXISTS artists"""
time_table_drop = """drop table IF EXISTS timetable"""

# CREATE TABLES

staging_events_table_create= ("""CREATE TABLE IF NOT EXISTS staging_events (artist text, auth text, firstName text, gender text, ItemInSession int,lastName text, length float, level text, location text, method text,page text, registration text, sessionId int, song text, status int,ts bigint, userAgent text, userId int)""")

staging_songs_table_create = ("""CREATE TABLE IF NOT EXISTS staging_songs (song_id text PRIMARY KEY, artist_id text, artist_latitude float,artist_longitude float, artist_location text, artist_name text,duration float, num_songs int, title text, year int)""")

songplay_table_create = ("""CREATE TABLE IF NOT EXISTS songplay(songplay_id INT IDENTITY PRIMARY KEY , start_time bigint, user_id int, level text, song_id text, artist_id text, session_id int, location text, user_agent text)""")

user_table_create = ("""CREATE TABLE IF NOT EXISTS users(user_id INT IDENTITY PRIMARY KEY , first_name text, last_name text, gender text, level text )""")


song_table_create = ("""CREATE TABLE IF NOT EXISTS songs(song_id text , title text, artist_id text, year int, duration float)""")

artist_table_create = (""" CREATE TABLE IF NOT EXISTS artists(artist_id text, name text, location text, latitude float, logitude float)""")

time_table_create = ("""CREATE TABLE timetable (start_time timestamp NOT NULL PRIMARY KEY, hour int, day int, week int,month varchar, year int,weekday varchar)""")


# STAGING TABLES

staging_events_copy = (""" 
    copy staging_events from 's3://udacity-dend/log-data'
    iam_role {}
    region 'us-west-2' compupdate off 
    JSON 's3://udacity-dend/log_json_path.json'
""").format(config.get('IAM_ROLE', 'ARN'))

staging_songs_copy = ("""
    copy staging_songs 
    from {}
    iam_role {}
    compupdate off region 'us-west-2'
    JSON 'auto' truncatecolumns;
""").format(config['S3']['SONG_DATA'], config['IAM_ROLE']['ARN'])

# FINAL TABLES

user_table_insert = ("""INSERT INTO users(first_name, last_name, gender, level)SELECT firstname, lastname, gender, level from staging_events""")

song_table_insert = ("""INSERT INTO songs(song_id, title, artist_id, year, duration) SELECT song_id, title, artist_id,year, duration from staging_songs""")

artist_table_insert = ("""INSERT INTO artists(artist_id, name, location, lattitude, logitude)
SELECT artist_id, artist_name,artist_location, artist_latitude, artist_longitude FROM staging_songs""")


songplay_table_insert = ("""INSERT INTO songplay (start_time,user_id,level,song_id,artist_id,session_id,location,user_agent)
SELECT ts,userId,level,song_id,artist_id,sessionId,location,userAgent
FROM (

SELECT se.ts, se.userId, se.level, sa.song_id, sa.artist_id, se.sessionId, se.location, se.userAgent

FROM staging_events se

JOIN

(SELECT songs.song_id, artists.artist_id, songs.title, artists.name,songs.duration

FROM songs

JOIN artists

ON songs.artist_id = artists.artist_id) AS sa

ON (sa.title = se.song

AND sa.name = se.artist

AND sa.duration = se.length)

WHERE se.page = 'NextSong');
""")


time_table_insert = """INSERT INTO time(t_ts,t_start_time,t_hour,t_day,t_week,t_month,t_year,t_weekday)

Select distinct ts

,t_start_time

,EXTRACT(HOUR FROM t_start_time) As t_hour

,EXTRACT(DAY FROM t_start_time) As t_day

,EXTRACT(WEEK FROM t_start_time) As t_week

,EXTRACT(MONTH FROM t_start_time) As t_month

,EXTRACT(YEAR FROM t_start_time) As t_year

,EXTRACT(DOW FROM t_start_time) As t_weekday

FROM (

SELECT distinct ts,'1970-01-01'::date + ts/1000 * interval '1 second' as t_start_time

FROM staging_events

) tab"""

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
